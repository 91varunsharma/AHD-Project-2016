# Changes to be made 
	add R13 -- see encryption
	change the place where we initialize R20
	Check if all the initialization is done properly
	check when you are storing
# Register File info

R0 Hard coded to 0x0
R1 a_reg
R2 b_reg
R3 i
R4 i_tmp
R5 ab_xor
R6 ba_xor
R7 a_rot
R8 b_rot
R11 s_arr[0]-address
R12 s_arr_tmp

# COMMON REGISTERS
R19 Counter for finding variable rotate amount
R20 Flag- TO DERERMINE WHICH MODULE IS PRESENTLY BEING RUN
R21 #FFFF
R22 rot_num
R23 rot_out
R24 rot_amt
R25 flag_tmp
R27 a1
R28 b1
R29 o1
R30 ab_or
R31 ab_and

# ASSEMBLY CODE
	
	# INITIALIZATION
	ADD R0 R0 R13
	ADDI R3 R3 2 					# SET i TO 2
	ADDI R4 R4 25 					# SET i_tmp TO 25
	LW RO R1 #ADDRESS 				# LOAD A_REG
	LW R0 R2 #ADDRESS 				# LOAD B_REG
	ADDI R0 R11 #ADDRESS 			# STORE THE ADDRESS OF S[0]
	ADDI R11 R11 25					# GO TO THE ADDRESS OF S[25]
	LW R11 R12 0 					# LOAD S[i]
	
	# DECRYPTION
	
		# LOOP BEGINS HERE
	ADDI R0 R20 3
	SUB R2 R12 R2
	ADD R0 R2 R22 					# ROT BEGINS HERE
	ANDI R1 R13 31 					# MOD BY 32
	ADD R0 R13 R24
	JMP #ADDRESS 					# ROT
	ADD R0 R23 R8 					# ROT ENDS HERE
	OR R8 R1 R30 					# XOR STARTS HERE
	AND R8 R1 R31
	SUB R30 R31 R6 					# XOR ENDS HERE
	ADD R0 R6 R2
	SUBI R4 R4 1
	SUBI R11 R11 1
	LW R11 R12 0
	SUB R1 R12 R1
	ADD R0 R1 R22 					# ROT BEGINS HERE
	ANDI R2 R13 31 					# MOD BY 32
	ADD R0 R13 R24
	JMP #ADDRESS 					# ROT
	ADD R0 R23 R7 					# ROT ENDS HERE
	OR R7 R2 R30 					# XOR STARTS HERE
	AND R7 R2 R31
	SUB R30 R31 R5 					# XOR ENDS HERE
	ADD R0 R5 R1
	SUBI R4 R4 1
	SUBI R11 R11 1
	LW R11 R12 0
	BEQ R3 R4 #BRANCH_ADDRESS#1
	JMP #ADDRESS 					# RETURN TO LOOP

	#BRANCH_ADDRESS#1

	SUB R2 R12 R2
	SUBI R11 R11 1
	SUB R1 R12 R1
	JMP #BRANCH_ADDRESS #HAL


