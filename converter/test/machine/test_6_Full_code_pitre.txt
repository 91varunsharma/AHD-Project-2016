000000 00000 00000 01010 00000 010000
000000 00000 00000 01000 00000 010000
000000 00000 00000 01001 00000 010000
000000 00000 00000 00001 00000 010000
000001 00000 10001 0000000001001110
000001 00000 10010 0000000000011010
000001 00000 10011 0000000000000100
001010 10001 01010 0000000000011100
000111 01000 01011 0000000000000010 //return
000000 01011 00100 01011 00000 010000 //changed this to r4
000000 01011 00111 00011 00000 010000 //changed to r7
000101 00011 01101 0000000000000011
000110 00011 01110 0000000000011101
000000 01101 01110 00100 00000 010000
000000 00100 00010 00101 00000 010000
000111 01001 01100 0000000000011100 //L_ADD = 28
000000 01100 00101 00110 00000 010000
000011 00101 01110 0000000000011111
000000 00000 00000 01101 00000 010000
000000 00000 00110 00111 00000 010000
001010 01101 01110 0000000000000101 //branch to immediate out of the loop, imm = 27
000101 00111 01111 0000000000000001
000110 00111 10000 0000000000011111
000000 01111 10000 00111 00000 010000
000001 01101 01101 0000000000000001
001100 00000000000000000000010101 //Jump immediate back to start of loop imm = 21
001000 01000 00100 0000000000000010 // S_ADD = 2
001000 01001 00111 0000000000011100 // L_ADD = 28
000001 01000 01000 0000000000000001
000001 01001 01001 0000000000000001
000001 01010 01010 0000000000000001
001011 01000100100000000000000001 // branching to skip reset => imm = 34
000000 00000 00000 01000 00000 010000
001011 01001100110000000000000001 // branching to skip reset => imm = 36
000000 00000 00000 01001 00000 010000 
00110000000000000000000000001000 //jumping to return //end of key generation
000111 000000 000001 0000000000000000
000111 000000 000010 0000000000000001
000000 00000 00000 00011 00000 010000
000001 00000 11110 0000000000011010
000000 00000 00000 00100 00000 010000
000000 00000 00000 00101 00000 010000
000111 00011 11111 0000000000000010 // This will load S[0] in R31 mem => 2
000000 00001 11111 00100 00000 010000
000111 00011 11111 0000000000000011
000000 00010 11111 00101 00000 010000
000001 00011 00011 0000000000000010 
001010 00011 11110 0000000000011110 //branch to just after the end
000000 00100 00101 00110 00000 010010 //This is the place where the code will return at the end
000000 00101 00111 00111 00000 010100
000000 00110 00111 01000 00000 010100 //this is changed to nor
000011 00101 00111 0000000000011111
000000 00000 00000 00110 00000 010000
000000 00000 01000 01001 00000 010000
001010 00110 00111 0000000000000101 //Branch to immediately after the jump instruction
000101 01001 01010 0000000000000001
000110 01001 01011 0000000000011111
000000 01010 01011 01001 00000 010000
000001 00110 00110 0000000000000001
001100 00000 00000 0000000000110111 //jump to the branch instruction 
000111 00011 11111 0000000000000010 //offset is 2 for memory
000000 01001 11111 00100 00000 010000
000000 00100 00101 00110 00000 010010
000000 00101 00100 00111 00000 010100
000000 00101 00111 01100 00000 010100 //this is changed to nor
000011 00100 00111 0000000000011111
000000 00000 00000 00110 00000 010000
000000 00000 01100 01101 00000 010000
001010 00110 00111 0000000000000101 //branch immediate value will be just after jump
000101 01101 01010 0000000000000001
000110 01101 01011 0000000000 011111
000000 01010 01011 01101 00000 010000
000001 00110 00110 0000000000000001
001100 00000 00000 0000000001000101 //jump value should go back to branch
000111 00011 11111 0000000000000010 //offset for memory is 2
000000 01101 11111 00101 00000 010000
000001 00011 00011 0000000000000010
001100 00000 00000 0000000000110000  //This should go to the return
001000 00000 00100 0000000000100000//sw R0 R4 32
001000 00000 00101 0000000000100001//sw R0 R5 33 //end of encryption
000111 00000 00100 0000000000100000
000111 00000 00101 0000000000100001
000001 00000 00011 0000000000011000
001010 00011 00000 0000000000011110// branch to after the end
000111 00011 01000 0000000000000011 //we return at this point //offset + 1 = 3
000000 00101 01000 00111 00000 010001
000011 00100 01001 0000000000011111
000000 00000 00000 01000 00000 010000
000000 00000 00111 01011 00000 010000
001010 01000 01001 0000000000000101 // Branch to just after the jump statement
000110 01011 01100 0000000000000001
000101 01011 01101 0000000000011111
000000 01100 01101 01011 00000 010000
000001 01000 01000 0000000000000001
001100 00000 00000 0000000001011010 // jump to the branch statement
000000 00100 01011 01000 00000 010010
000000 01011 00100 01001 00000 010100
000000 01000 01001 00101 00000 010100
000111 00011 01000 0000000000000010
000000 00100 01000 00110 00000 010001
000011 00101 01001 0000000000011111
000000 00000 00000 01000 00000 010000
000000 00000 00110 01010 00000 010000
001010 01000 01001 0000000000000101 //branch to after the jump
000110 01010 01100 0000000000000001
000101 01010 01101 0000000000011111
000000 01100 01101 01010 00000 010000
000001 01000 01000 0000000000000001
001100 00000 00000 0000000001101000	// jump to the branch
000000 01010 00101 01000 00000 010100
000000 00101 01010 01001 00000 010010
000000 01000 01001 00100 00000 010100
000010 00011 00011 0000000000000010
001100 00000 00000 0000000001010100 //jump should go to return
000111 00011 01000 0000000000000011
000000 00101 01000 00101 00000 010001
000111 00011 01000 0000000000000010
000000 00100 01000 00100 00000 010001
001000 00000 00100 0000000000100010//sw r0 r4 34
001000 00000 00101 0000000000100011//sw r0 r5 35





